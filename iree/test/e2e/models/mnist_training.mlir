// MNIST model with empty weights, for testing.
//
// Generated by the colab/mnist_training.ipynb notebook with manual edits to
// * remove remaining TensorFlow attributes
// * replace large values with zeros
//
// Note: batch size is set to 32

// RUN: iree-run-mlir -iree-hal-target-backends=vmvx %s -function-input="32x28x28x1xf32" -function-input="32xi32" | IreeFileCheck %s
// RUN: [[ $IREE_LLVMAOT_DISABLE == 1 ]] || (iree-run-mlir -iree-hal-target-backends=dylib-llvm-aot %s -function-input="32x28x28x1xf32" -function-input="32xi32" | IreeFileCheck %s)
// RUN: [[ $IREE_VULKAN_DISABLE == 1 ]] || (iree-run-mlir -iree-hal-target-backends=vulkan-spirv %s -function-input="32x28x28x1xf32" -function-input="32xi32" | IreeFileCheck %s)

#map0 = affine_map<(d0) -> (d0)>
#map1 = affine_map<(d0, d1) -> (d1)>
#map2 = affine_map<(d0, d1) -> (d0, d1)>
#map3 = affine_map<(d0, d1) -> ()>
#map4 = affine_map<(d0, d1) -> (d0)>
#map5 = affine_map<(d0) -> ()>
#map6 = affine_map<(d0, d1) -> (d0, 0)>
#map7 = affine_map<(d0, d1) -> (d1, d0)>
#map8 = affine_map<() -> ()>
module  {
  util.global private mutable @__iree_flow___sm_node14__optimizer.iter = dense<0> : tensor<i32>
  util.global private @__iree_flow___sm_node16__optimizer.learning_rate = dense<0.00999999977> : tensor<f32>
  util.global private mutable @"__iree_flow___sm_node22__model.layer-2.kernel" = dense<0.000000e+0> : tensor<784x128xf32>
  util.global private mutable @"__iree_flow___sm_node23__model.layer-2.bias" = dense<0.000000e+00> : tensor<128xf32>
  util.global private mutable @"__iree_flow___sm_node32__model.layer-4.kernel" = dense<0.000000e+0> : tensor<128x10xf32>
  util.global private mutable @"__iree_flow___sm_node33__model.layer-4.bias" = dense<0.000000e+00> : tensor<10xf32>
  // CHECK-LABEL: EXEC @learn
  func @learn(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi = "{\22a\22:[[\22ndarray\22,\22f32\22,4,32,28,28,1],[\22ndarray\22,\22i32\22,1,32]],\22r\22:[[\22ndarray\22,\22f32\22,0]],\22v\22:1}"} {
    %0 = hal.tensor.cast %arg0 : !hal.buffer_view -> tensor<32x28x28x1xf32>
    %1 = hal.tensor.cast %arg1 : !hal.buffer_view -> tensor<32xi32>
    %2 = call @__inference_learn_9970(%0, %1) : (tensor<32x28x28x1xf32>, tensor<32xi32>) -> tensor<f32>
    %3 = hal.tensor.cast %2 : tensor<f32> -> !hal.buffer_view
    return %3 : !hal.buffer_view
  }
  func private @__inference_learn_9970(%arg0: tensor<32x28x28x1xf32>, %arg1: tensor<32xi32>) -> tensor<f32> {
    %cst = constant dense<1> : tensor<i32>
    %cst_0 = constant dense<3.125000e-02> : tensor<32x1xf32>
    %cst_1 = constant dense<3.200000e+01> : tensor<f32>
    %cst_2 = constant dense<1.000000e+00> : tensor<f32>
    %cst_3 = constant dense<0> : tensor<i32>
    %cst_4 = constant dense<10> : tensor<i32>
    %cst_5 = constant dense<0x7FC00000> : tensor<f32>
    %cst_6 = constant dense<0.000000e+00> : tensor<32x128xf32>
    %cst_7 = constant dense<0.000000e+00> : tensor<f32>
    %cst_8 = constant dense<0.00999999977> : tensor<f32>
    %cst_9 = constant 0.000000e+00 : f32
    %cst_10 = constant 0x7FC00000 : f32
    %cst_11 = constant 0xFF800000 : f32
    %0 = linalg.init_tensor [32] : tensor<32xf32>
    %1 = linalg.generic {indexing_maps = [#map0, #map0], iterator_types = ["parallel"]} ins(%arg1 : tensor<32xi32>) outs(%0 : tensor<32xf32>) {
    ^bb0(%arg2: i32, %arg3: f32):  // no predecessors
      %173 = sitofp %arg2 : i32 to f32
      linalg.yield %173 : f32
    } -> tensor<32xf32>
    %2 = linalg.init_tensor [32] : tensor<32xi32>
    %3 = linalg.generic {indexing_maps = [#map0, #map0], iterator_types = ["parallel"]} ins(%1 : tensor<32xf32>) outs(%2 : tensor<32xi32>) {
    ^bb0(%arg2: f32, %arg3: i32):  // no predecessors
      %173 = fptosi %arg2 : f32 to i32
      linalg.yield %173 : i32
    } -> tensor<32xi32>
    %4 = linalg.tensor_collapse_shape %arg0 [[0], [1, 2, 3]] : tensor<32x28x28x1xf32> into tensor<32x784xf32>
    %__iree_flow___sm_node23__model.layer-2.bias = util.global.load @"__iree_flow___sm_node23__model.layer-2.bias" : tensor<128xf32>
    %__iree_flow___sm_node22__model.layer-2.kernel = util.global.load @"__iree_flow___sm_node22__model.layer-2.kernel" : tensor<784x128xf32>
    %5 = linalg.init_tensor [32, 128] : tensor<32x128xf32>
    %6 = linalg.fill(%cst_9, %5) : f32, tensor<32x128xf32> -> tensor<32x128xf32>
    %7 = linalg.matmul ins(%4, %__iree_flow___sm_node22__model.layer-2.kernel : tensor<32x784xf32>, tensor<784x128xf32>) outs(%6 : tensor<32x128xf32>) -> tensor<32x128xf32>
    %8 = linalg.init_tensor [32, 128] : tensor<32x128xf32>
    %9 = linalg.generic {indexing_maps = [#map1, #map2], iterator_types = ["parallel", "parallel"]} ins(%__iree_flow___sm_node23__model.layer-2.bias : tensor<128xf32>) outs(%8 : tensor<32x128xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<32x128xf32>
    %10 = linalg.init_tensor [32, 128] : tensor<32x128xf32>
    %11 = linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%7, %9 : tensor<32x128xf32>, tensor<32x128xf32>) outs(%10 : tensor<32x128xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = addf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<32x128xf32>
    %12 = linalg.init_tensor [32, 128] : tensor<32x128xf32>
    %13 = linalg.generic {indexing_maps = [#map3, #map2], iterator_types = ["parallel", "parallel"]} ins(%cst_7 : tensor<f32>) outs(%12 : tensor<32x128xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<32x128xf32>
    %14 = linalg.init_tensor [32, 128] : tensor<32x128xf32>
    %15 = linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%11, %13 : tensor<32x128xf32>, tensor<32x128xf32>) outs(%14 : tensor<32x128xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = cmpf ogt, %arg2, %arg3 : f32
      %174 = select %173, %arg2, %arg3 : f32
      %175 = cmpf uno, %arg2, %arg3 : f32
      %176 = select %175, %cst_10, %174 : f32
      linalg.yield %176 : f32
    } -> tensor<32x128xf32>
    %__iree_flow___sm_node33__model.layer-4.bias = util.global.load @"__iree_flow___sm_node33__model.layer-4.bias" : tensor<10xf32>
    %__iree_flow___sm_node32__model.layer-4.kernel = util.global.load @"__iree_flow___sm_node32__model.layer-4.kernel" : tensor<128x10xf32>
    %16 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %17 = linalg.fill(%cst_9, %16) : f32, tensor<32x10xf32> -> tensor<32x10xf32>
    %18 = linalg.matmul ins(%15, %__iree_flow___sm_node32__model.layer-4.kernel : tensor<32x128xf32>, tensor<128x10xf32>) outs(%17 : tensor<32x10xf32>) -> tensor<32x10xf32>
    %19 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %20 = linalg.generic {indexing_maps = [#map1, #map2], iterator_types = ["parallel", "parallel"]} ins(%__iree_flow___sm_node33__model.layer-4.bias : tensor<10xf32>) outs(%19 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<32x10xf32>
    %21 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %22 = linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%18, %20 : tensor<32x10xf32>, tensor<32x10xf32>) outs(%21 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = addf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<32x10xf32>
    %23 = linalg.init_tensor [10] : tensor<10xi32>
    %24 = linalg.generic {indexing_maps = [#map0], iterator_types = ["parallel"]} outs(%23 : tensor<10xi32>) {
    ^bb0(%arg2: i32):  // no predecessors
      %173 = linalg.index 0 : index
      %174 = index_cast %173 : index to i32
      linalg.yield %174 : i32
    } -> tensor<10xi32>
    %25 = linalg.init_tensor [32, 10] : tensor<32x10xi32>
    %26 = linalg.generic {indexing_maps = [#map1, #map2], iterator_types = ["parallel", "parallel"]} ins(%24 : tensor<10xi32>) outs(%25 : tensor<32x10xi32>) {
    ^bb0(%arg2: i32, %arg3: i32):  // no predecessors
      linalg.yield %arg2 : i32
    } -> tensor<32x10xi32>
    %27 = linalg.init_tensor [32, 10] : tensor<32x10xi32>
    %28 = linalg.generic {indexing_maps = [#map4, #map2], iterator_types = ["parallel", "parallel"]} ins(%3 : tensor<32xi32>) outs(%27 : tensor<32x10xi32>) {
    ^bb0(%arg2: i32, %arg3: i32):  // no predecessors
      linalg.yield %arg2 : i32
    } -> tensor<32x10xi32>
    %29 = linalg.init_tensor [32, 10] : tensor<32x10xi1>
    %30 = linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%28, %26 : tensor<32x10xi32>, tensor<32x10xi32>) outs(%29 : tensor<32x10xi1>) {
    ^bb0(%arg2: i32, %arg3: i32, %arg4: i1):  // no predecessors
      %173 = cmpi eq, %arg2, %arg3 : i32
      linalg.yield %173 : i1
    } -> tensor<32x10xi1>
    %31 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %32 = linalg.generic {indexing_maps = [#map3, #map2], iterator_types = ["parallel", "parallel"]} ins(%cst_2 : tensor<f32>) outs(%31 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<32x10xf32>
    %33 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %34 = linalg.generic {indexing_maps = [#map3, #map2], iterator_types = ["parallel", "parallel"]} ins(%cst_7 : tensor<f32>) outs(%33 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<32x10xf32>
    %35 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %36 = linalg.generic {indexing_maps = [#map2, #map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%30, %32, %34 : tensor<32x10xi1>, tensor<32x10xf32>, tensor<32x10xf32>) outs(%35 : tensor<32x10xf32>) {
    ^bb0(%arg2: i1, %arg3: f32, %arg4: f32, %arg5: f32):  // no predecessors
      %173 = select %arg2, %arg3, %arg4 : f32
      linalg.yield %173 : f32
    } -> tensor<32x10xf32>
    %37 = linalg.init_tensor [32] : tensor<32xi32>
    %38 = linalg.generic {indexing_maps = [#map5, #map0], iterator_types = ["parallel"]} ins(%cst_3 : tensor<i32>) outs(%37 : tensor<32xi32>) {
    ^bb0(%arg2: i32, %arg3: i32):  // no predecessors
      linalg.yield %arg2 : i32
    } -> tensor<32xi32>
    %39 = linalg.init_tensor [32] : tensor<32xi1>
    %40 = linalg.generic {indexing_maps = [#map0, #map0, #map0], iterator_types = ["parallel"]} ins(%38, %3 : tensor<32xi32>, tensor<32xi32>) outs(%39 : tensor<32xi1>) {
    ^bb0(%arg2: i32, %arg3: i32, %arg4: i1):  // no predecessors
      %173 = cmpi sle, %arg2, %arg3 : i32
      linalg.yield %173 : i1
    } -> tensor<32xi1>
    %41 = linalg.init_tensor [32] : tensor<32xi32>
    %42 = linalg.generic {indexing_maps = [#map5, #map0], iterator_types = ["parallel"]} ins(%cst_4 : tensor<i32>) outs(%41 : tensor<32xi32>) {
    ^bb0(%arg2: i32, %arg3: i32):  // no predecessors
      linalg.yield %arg2 : i32
    } -> tensor<32xi32>
    %43 = linalg.init_tensor [32] : tensor<32xi1>
    %44 = linalg.generic {indexing_maps = [#map0, #map0, #map0], iterator_types = ["parallel"]} ins(%3, %42 : tensor<32xi32>, tensor<32xi32>) outs(%43 : tensor<32xi1>) {
    ^bb0(%arg2: i32, %arg3: i32, %arg4: i1):  // no predecessors
      %173 = cmpi slt, %arg2, %arg3 : i32
      linalg.yield %173 : i1
    } -> tensor<32xi1>
    %45 = linalg.init_tensor [32] : tensor<32xi1>
    %46 = linalg.generic {indexing_maps = [#map0, #map0, #map0], iterator_types = ["parallel"]} ins(%40, %44 : tensor<32xi1>, tensor<32xi1>) outs(%45 : tensor<32xi1>) {
    ^bb0(%arg2: i1, %arg3: i1, %arg4: i1):  // no predecessors
      %173 = and %arg2, %arg3 : i1
      linalg.yield %173 : i1
    } -> tensor<32xi1>
    %47 = linalg.init_tensor [32] : tensor<32xf32>
    %48 = linalg.generic {indexing_maps = [#map5, #map0], iterator_types = ["parallel"]} ins(%cst_7 : tensor<f32>) outs(%47 : tensor<32xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<32xf32>
    %49 = linalg.init_tensor [32] : tensor<32xf32>
    %50 = linalg.generic {indexing_maps = [#map5, #map0], iterator_types = ["parallel"]} ins(%cst_5 : tensor<f32>) outs(%49 : tensor<32xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<32xf32>
    %51 = linalg.init_tensor [32] : tensor<32xf32>
    %52 = linalg.generic {indexing_maps = [#map0, #map0, #map0, #map0], iterator_types = ["parallel"]} ins(%46, %48, %50 : tensor<32xi1>, tensor<32xf32>, tensor<32xf32>) outs(%51 : tensor<32xf32>) {
    ^bb0(%arg2: i1, %arg3: f32, %arg4: f32, %arg5: f32):  // no predecessors
      %173 = select %arg2, %arg3, %arg4 : f32
      linalg.yield %173 : f32
    } -> tensor<32xf32>
    %53 = linalg.tensor_expand_shape %52 [[0, 1]] : tensor<32xf32> into tensor<32x1xf32>
    %54 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %55 = linalg.generic {indexing_maps = [#map6, #map2], iterator_types = ["parallel", "parallel"]} ins(%53 : tensor<32x1xf32>) outs(%54 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<32x10xf32>
    %56 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %57 = linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%36, %55 : tensor<32x10xf32>, tensor<32x10xf32>) outs(%56 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = addf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<32x10xf32>
    %58 = linalg.init_tensor [32] : tensor<32xf32>
    %59 = linalg.fill(%cst_11, %58) : f32, tensor<32xf32> -> tensor<32xf32>
    %60 = linalg.generic {indexing_maps = [#map2, #map4], iterator_types = ["parallel", "reduction"]} ins(%22 : tensor<32x10xf32>) outs(%59 : tensor<32xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      %173 = cmpf ogt, %arg2, %arg3 : f32
      %174 = select %173, %arg2, %arg3 : f32
      %175 = cmpf uno, %arg2, %arg3 : f32
      %176 = select %175, %cst_10, %174 : f32
      linalg.yield %176 : f32
    } -> tensor<32xf32>
    %61 = linalg.tensor_expand_shape %60 [[0, 1]] : tensor<32xf32> into tensor<32x1xf32>
    %62 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %63 = linalg.generic {indexing_maps = [#map6, #map2], iterator_types = ["parallel", "parallel"]} ins(%61 : tensor<32x1xf32>) outs(%62 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<32x10xf32>
    %64 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %65 = linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%22, %63 : tensor<32x10xf32>, tensor<32x10xf32>) outs(%64 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = subf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<32x10xf32>
    %66 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %67 = linalg.generic {indexing_maps = [#map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%65 : tensor<32x10xf32>) outs(%66 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      %173 = math.exp %arg2 : f32
      linalg.yield %173 : f32
    } -> tensor<32x10xf32>
    %68 = linalg.init_tensor [32] : tensor<32xf32>
    %69 = linalg.fill(%cst_9, %68) : f32, tensor<32xf32> -> tensor<32xf32>
    %70 = linalg.generic {indexing_maps = [#map2, #map4], iterator_types = ["parallel", "reduction"]} ins(%67 : tensor<32x10xf32>) outs(%69 : tensor<32xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      %173 = addf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<32xf32>
    %71 = linalg.tensor_expand_shape %70 [[0, 1]] : tensor<32xf32> into tensor<32x1xf32>
    %72 = linalg.init_tensor [32, 1] : tensor<32x1xf32>
    %73 = linalg.generic {indexing_maps = [#map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%71 : tensor<32x1xf32>) outs(%72 : tensor<32x1xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      %173 = math.log %arg2 : f32
      linalg.yield %173 : f32
    } -> tensor<32x1xf32>
    %74 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %75 = linalg.generic {indexing_maps = [#map6, #map2], iterator_types = ["parallel", "parallel"]} ins(%73 : tensor<32x1xf32>) outs(%74 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<32x10xf32>
    %76 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %77 = linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%65, %75 : tensor<32x10xf32>, tensor<32x10xf32>) outs(%76 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = subf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<32x10xf32>
    %78 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %79 = linalg.generic {indexing_maps = [#map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%57 : tensor<32x10xf32>) outs(%78 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      %173 = negf %arg2 : f32
      linalg.yield %173 : f32
    } -> tensor<32x10xf32>
    %80 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %81 = linalg.generic {indexing_maps = [#map3, #map2], iterator_types = ["parallel", "parallel"]} ins(%cst_7 : tensor<f32>) outs(%80 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<32x10xf32>
    %82 = linalg.init_tensor [32, 10] : tensor<32x10xi1>
    %83 = linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%79, %81 : tensor<32x10xf32>, tensor<32x10xf32>) outs(%82 : tensor<32x10xi1>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: i1):  // no predecessors
      %173 = cmpf oeq, %arg2, %arg3 : f32
      linalg.yield %173 : i1
    } -> tensor<32x10xi1>
    %84 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %85 = linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%77, %79 : tensor<32x10xf32>, tensor<32x10xf32>) outs(%84 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = mulf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<32x10xf32>
    %86 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %87 = linalg.generic {indexing_maps = [#map3, #map2], iterator_types = ["parallel", "parallel"]} ins(%cst_7 : tensor<f32>) outs(%86 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<32x10xf32>
    %88 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %89 = linalg.generic {indexing_maps = [#map2, #map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%83, %87, %85 : tensor<32x10xi1>, tensor<32x10xf32>, tensor<32x10xf32>) outs(%88 : tensor<32x10xf32>) {
    ^bb0(%arg2: i1, %arg3: f32, %arg4: f32, %arg5: f32):  // no predecessors
      %173 = select %arg2, %arg3, %arg4 : f32
      linalg.yield %173 : f32
    } -> tensor<32x10xf32>
    %90 = linalg.init_tensor [32] : tensor<32xf32>
    %91 = linalg.fill(%cst_9, %90) : f32, tensor<32xf32> -> tensor<32xf32>
    %92 = linalg.generic {indexing_maps = [#map2, #map4], iterator_types = ["parallel", "reduction"]} ins(%89 : tensor<32x10xf32>) outs(%91 : tensor<32xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      %173 = addf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<32xf32>
    %93 = linalg.init_tensor [32] : tensor<32xf32>
    %94 = linalg.fill(%cst_11, %93) : f32, tensor<32xf32> -> tensor<32xf32>
    %95 = linalg.generic {indexing_maps = [#map2, #map4], iterator_types = ["parallel", "reduction"]} ins(%22 : tensor<32x10xf32>) outs(%94 : tensor<32xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      %173 = cmpf ogt, %arg2, %arg3 : f32
      %174 = select %173, %arg2, %arg3 : f32
      %175 = cmpf uno, %arg2, %arg3 : f32
      %176 = select %175, %cst_10, %174 : f32
      linalg.yield %176 : f32
    } -> tensor<32xf32>
    %96 = linalg.tensor_expand_shape %95 [[0, 1]] : tensor<32xf32> into tensor<32x1xf32>
    %97 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %98 = linalg.generic {indexing_maps = [#map6, #map2], iterator_types = ["parallel", "parallel"]} ins(%96 : tensor<32x1xf32>) outs(%97 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<32x10xf32>
    %99 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %100 = linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%22, %98 : tensor<32x10xf32>, tensor<32x10xf32>) outs(%99 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = subf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<32x10xf32>
    %101 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %102 = linalg.generic {indexing_maps = [#map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<32x10xf32>) outs(%101 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      %173 = math.exp %arg2 : f32
      linalg.yield %173 : f32
    } -> tensor<32x10xf32>
    %103 = linalg.init_tensor [32] : tensor<32xf32>
    %104 = linalg.fill(%cst_9, %103) : f32, tensor<32xf32> -> tensor<32xf32>
    %105 = linalg.generic {indexing_maps = [#map2, #map4], iterator_types = ["parallel", "reduction"]} ins(%102 : tensor<32x10xf32>) outs(%104 : tensor<32xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      %173 = addf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<32xf32>
    %106 = linalg.tensor_expand_shape %105 [[0, 1]] : tensor<32xf32> into tensor<32x1xf32>
    %107 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %108 = linalg.generic {indexing_maps = [#map6, #map2], iterator_types = ["parallel", "parallel"]} ins(%106 : tensor<32x1xf32>) outs(%107 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<32x10xf32>
    %109 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %110 = linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%102, %108 : tensor<32x10xf32>, tensor<32x10xf32>) outs(%109 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = divf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<32x10xf32>
    %111 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %112 = linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%110, %57 : tensor<32x10xf32>, tensor<32x10xf32>) outs(%111 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = subf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<32x10xf32>
    %113 = linalg.init_tensor [] : tensor<f32>
    %114 = linalg.fill(%cst_9, %113) : f32, tensor<f32> -> tensor<f32>
    %115 = linalg.generic {indexing_maps = [#map0, #map5], iterator_types = ["reduction"]} ins(%92 : tensor<32xf32>) outs(%114 : tensor<f32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      %173 = addf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<f32>
    %116 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %117 = linalg.generic {indexing_maps = [#map6, #map2], iterator_types = ["parallel", "parallel"]} ins(%cst_0 : tensor<32x1xf32>) outs(%116 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<32x10xf32>
    %118 = linalg.init_tensor [32, 10] : tensor<32x10xf32>
    %119 = linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%112, %117 : tensor<32x10xf32>, tensor<32x10xf32>) outs(%118 : tensor<32x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = mulf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<32x10xf32>
    %120 = linalg.init_tensor [10] : tensor<10xf32>
    %121 = linalg.fill(%cst_9, %120) : f32, tensor<10xf32> -> tensor<10xf32>
    %122 = linalg.generic {indexing_maps = [#map7, #map4], iterator_types = ["parallel", "reduction"]} ins(%119 : tensor<32x10xf32>) outs(%121 : tensor<10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      %173 = addf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<10xf32>
    %__iree_flow___sm_node33__model.layer-4.bias_12 = util.global.load @"__iree_flow___sm_node33__model.layer-4.bias" : tensor<10xf32>
    %123 = linalg.init_tensor [10] : tensor<10xf32>
    %124 = linalg.generic {indexing_maps = [#map5, #map0], iterator_types = ["parallel"]} ins(%cst_8 : tensor<f32>) outs(%123 : tensor<10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<10xf32>
    %125 = linalg.init_tensor [10] : tensor<10xf32>
    %126 = linalg.generic {indexing_maps = [#map0, #map0, #map0], iterator_types = ["parallel"]} ins(%122, %124 : tensor<10xf32>, tensor<10xf32>) outs(%125 : tensor<10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = mulf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<10xf32>
    %127 = linalg.init_tensor [10] : tensor<10xf32>
    %128 = linalg.generic {indexing_maps = [#map0, #map0, #map0], iterator_types = ["parallel"]} ins(%__iree_flow___sm_node33__model.layer-4.bias_12, %126 : tensor<10xf32>, tensor<10xf32>) outs(%127 : tensor<10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = subf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<10xf32>
    util.global.store %128, @"__iree_flow___sm_node33__model.layer-4.bias" : tensor<10xf32>
    %129 = linalg.init_tensor [10, 128] : tensor<10x128xf32>
    %130 = linalg.generic {indexing_maps = [#map7, #map2], iterator_types = ["parallel", "parallel"]} ins(%__iree_flow___sm_node32__model.layer-4.kernel : tensor<128x10xf32>) outs(%129 : tensor<10x128xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<10x128xf32>
    %131 = linalg.init_tensor [32, 128] : tensor<32x128xf32>
    %132 = linalg.fill(%cst_9, %131) : f32, tensor<32x128xf32> -> tensor<32x128xf32>
    %133 = linalg.matmul ins(%119, %130 : tensor<32x10xf32>, tensor<10x128xf32>) outs(%132 : tensor<32x128xf32>) -> tensor<32x128xf32>
    %134 = linalg.init_tensor [32, 128] : tensor<32x128xi1>
    %135 = linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%15, %cst_6 : tensor<32x128xf32>, tensor<32x128xf32>) outs(%134 : tensor<32x128xi1>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: i1):  // no predecessors
      %173 = cmpf ogt, %arg2, %arg3 : f32
      linalg.yield %173 : i1
    } -> tensor<32x128xi1>
    %136 = linalg.init_tensor [32, 128] : tensor<32x128xf32>
    %137 = linalg.generic {indexing_maps = [#map2, #map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%135, %133, %cst_6 : tensor<32x128xi1>, tensor<32x128xf32>, tensor<32x128xf32>) outs(%136 : tensor<32x128xf32>) {
    ^bb0(%arg2: i1, %arg3: f32, %arg4: f32, %arg5: f32):  // no predecessors
      %173 = select %arg2, %arg3, %arg4 : f32
      linalg.yield %173 : f32
    } -> tensor<32x128xf32>
    %138 = linalg.init_tensor [128] : tensor<128xf32>
    %139 = linalg.fill(%cst_9, %138) : f32, tensor<128xf32> -> tensor<128xf32>
    %140 = linalg.generic {indexing_maps = [#map7, #map4], iterator_types = ["parallel", "reduction"]} ins(%137 : tensor<32x128xf32>) outs(%139 : tensor<128xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      %173 = addf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<128xf32>
    %__iree_flow___sm_node23__model.layer-2.bias_13 = util.global.load @"__iree_flow___sm_node23__model.layer-2.bias" : tensor<128xf32>
    %141 = linalg.init_tensor [128] : tensor<128xf32>
    %142 = linalg.generic {indexing_maps = [#map5, #map0], iterator_types = ["parallel"]} ins(%cst_8 : tensor<f32>) outs(%141 : tensor<128xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<128xf32>
    %143 = linalg.init_tensor [128] : tensor<128xf32>
    %144 = linalg.generic {indexing_maps = [#map0, #map0, #map0], iterator_types = ["parallel"]} ins(%140, %142 : tensor<128xf32>, tensor<128xf32>) outs(%143 : tensor<128xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = mulf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<128xf32>
    %145 = linalg.init_tensor [128] : tensor<128xf32>
    %146 = linalg.generic {indexing_maps = [#map0, #map0, #map0], iterator_types = ["parallel"]} ins(%__iree_flow___sm_node23__model.layer-2.bias_13, %144 : tensor<128xf32>, tensor<128xf32>) outs(%145 : tensor<128xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = subf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<128xf32>
    util.global.store %146, @"__iree_flow___sm_node23__model.layer-2.bias" : tensor<128xf32>
    %147 = linalg.init_tensor [784, 32] : tensor<784x32xf32>
    %148 = linalg.generic {indexing_maps = [#map7, #map2], iterator_types = ["parallel", "parallel"]} ins(%4 : tensor<32x784xf32>) outs(%147 : tensor<784x32xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<784x32xf32>
    %149 = linalg.init_tensor [784, 128] : tensor<784x128xf32>
    %150 = linalg.fill(%cst_9, %149) : f32, tensor<784x128xf32> -> tensor<784x128xf32>
    %151 = linalg.matmul ins(%148, %137 : tensor<784x32xf32>, tensor<32x128xf32>) outs(%150 : tensor<784x128xf32>) -> tensor<784x128xf32>
    %__iree_flow___sm_node22__model.layer-2.kernel_14 = util.global.load @"__iree_flow___sm_node22__model.layer-2.kernel" : tensor<784x128xf32>
    %152 = linalg.init_tensor [784, 128] : tensor<784x128xf32>
    %153 = linalg.generic {indexing_maps = [#map3, #map2], iterator_types = ["parallel", "parallel"]} ins(%cst_8 : tensor<f32>) outs(%152 : tensor<784x128xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<784x128xf32>
    %154 = linalg.init_tensor [784, 128] : tensor<784x128xf32>
    %155 = linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%151, %153 : tensor<784x128xf32>, tensor<784x128xf32>) outs(%154 : tensor<784x128xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = mulf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<784x128xf32>
    %156 = linalg.init_tensor [784, 128] : tensor<784x128xf32>
    %157 = linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%__iree_flow___sm_node22__model.layer-2.kernel_14, %155 : tensor<784x128xf32>, tensor<784x128xf32>) outs(%156 : tensor<784x128xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = subf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<784x128xf32>
    util.global.store %157, @"__iree_flow___sm_node22__model.layer-2.kernel" : tensor<784x128xf32>
    %158 = linalg.init_tensor [128, 32] : tensor<128x32xf32>
    %159 = linalg.generic {indexing_maps = [#map7, #map2], iterator_types = ["parallel", "parallel"]} ins(%15 : tensor<32x128xf32>) outs(%158 : tensor<128x32xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<128x32xf32>
    %160 = linalg.init_tensor [128, 10] : tensor<128x10xf32>
    %161 = linalg.fill(%cst_9, %160) : f32, tensor<128x10xf32> -> tensor<128x10xf32>
    %162 = linalg.matmul ins(%159, %119 : tensor<128x32xf32>, tensor<32x10xf32>) outs(%161 : tensor<128x10xf32>) -> tensor<128x10xf32>
    %__iree_flow___sm_node32__model.layer-4.kernel_15 = util.global.load @"__iree_flow___sm_node32__model.layer-4.kernel" : tensor<128x10xf32>
    %163 = linalg.init_tensor [128, 10] : tensor<128x10xf32>
    %164 = linalg.generic {indexing_maps = [#map3, #map2], iterator_types = ["parallel", "parallel"]} ins(%cst_8 : tensor<f32>) outs(%163 : tensor<128x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):  // no predecessors
      linalg.yield %arg2 : f32
    } -> tensor<128x10xf32>
    %165 = linalg.init_tensor [128, 10] : tensor<128x10xf32>
    %166 = linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%162, %164 : tensor<128x10xf32>, tensor<128x10xf32>) outs(%165 : tensor<128x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = mulf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<128x10xf32>
    %167 = linalg.init_tensor [128, 10] : tensor<128x10xf32>
    %168 = linalg.generic {indexing_maps = [#map2, #map2, #map2], iterator_types = ["parallel", "parallel"]} ins(%__iree_flow___sm_node32__model.layer-4.kernel_15, %166 : tensor<128x10xf32>, tensor<128x10xf32>) outs(%167 : tensor<128x10xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = subf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<128x10xf32>
    util.global.store %168, @"__iree_flow___sm_node32__model.layer-4.kernel" : tensor<128x10xf32>
    %__iree_flow___sm_node14__optimizer.iter = util.global.load @__iree_flow___sm_node14__optimizer.iter : tensor<i32>
    %169 = linalg.init_tensor [] : tensor<i32>
    %170 = linalg.generic {indexing_maps = [#map8, #map8, #map8], iterator_types = []} ins(%__iree_flow___sm_node14__optimizer.iter, %cst : tensor<i32>, tensor<i32>) outs(%169 : tensor<i32>) {
    ^bb0(%arg2: i32, %arg3: i32, %arg4: i32):  // no predecessors
      %173 = addi %arg2, %arg3 : i32
      linalg.yield %173 : i32
    } -> tensor<i32>
    util.global.store %170, @__iree_flow___sm_node14__optimizer.iter : tensor<i32>
    %171 = linalg.init_tensor [] : tensor<f32>
    %172 = linalg.generic {indexing_maps = [#map8, #map8, #map8], iterator_types = []} ins(%115, %cst_1 : tensor<f32>, tensor<f32>) outs(%171 : tensor<f32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):  // no predecessors
      %173 = divf %arg2, %arg3 : f32
      linalg.yield %173 : f32
    } -> tensor<f32>
    return %172 : tensor<f32>
  }
}

// CHECK: f32=2.302
